{"version":3,"sources":["App.tsx","GemDetailsCard.tsx","reportWebVitals.ts","index.tsx"],"names":["CharacterType","GemDetailsCard","name","groupCharacters","qS","questSource","level","playerCharacter","vendorClasses","replace","classes","groupBuyability","filter","char","includes","buyabilityStatus","length","console","log","Box","m","className","act","replaceAll","style","color","green","fontSize","yellow","join","red","gemData","rawGemData","gem","vendors","colors","quests","map","vendor","gemMap","reduce","total","gemNames","App","useState","Scion","character","setCharacter","setGroupCharacters","useReducer","state","action","type","indexOf","sort","a","b","itemIndex","stateCopy","splice","Error","activeGems","modifyGem","id","FormControl","InputLabel","Select","value","onChange","event","target","MenuItem","Autocomplete","options","renderInput","params","TextField","label","variant","inputProps","autoComplete","multiple","FormHelperText","Button","onClick","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f89e5a5e.chunk.js","sourcesContent":["import React, { ChangeEvent, useReducer, useState } from 'react';\nimport './App.scss';\n\n/* Material UI imports */\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Select from '@material-ui/core/Select';\n/* End of Material UI */\n\nimport rawGemData from './gemdata.json'\nimport GemDetailsCard from './GemDetailsCard';\n\ntype TQuest = {\n  act: string,\n  name: string,\n  classes: string,\n}\n\nexport interface IGemData {\n  name: string,\n  level: number,\n  vendorClasses: string,\n  questSource: TQuest,\n}\n\nconst gemData: IGemData[] = rawGemData.filter(gem => {\n  // Vendor length 0 is awakened gens\n  return (\n    gem.vendors.length > 0\n    && !gem.colors.includes('White')\n    && !(gem.quests.length === 0 && gem.level === '31')\n  )\n}).map(gem => ({\n  name: gem.name,\n  level: +gem.level || 31,\n  vendorClasses: gem.vendors.filter(vendor => vendor.act !== '1')[0]?.classes,\n  questSource: gem.quests[0] || {\n    act: \"3\",\n    name: \"fixture_of_fate\",\n    classes: \"All, Classes\"\n  },\n}))\n\n// console.log(rawGemData.filter(l => l.vendors.length > 1).map(gem => gem.name))\n\nconst gemMap: {[key: string]: IGemData} = gemData.reduce((total, gem) => {\n  // @ts-expect-error idk wtf is going up here honestly\n  total[gem.name] = gem\n  return total\n}, {})\n\nconst gemNames = gemData.map(gem => gem.name)\n\ntype TGemAction = {\n  type: 'add' | 'remove',\n  gem: string | null\n}\n\nexport enum CharacterType {\n  Scion = \"Scion\",\n  Witch = \"Witch\",\n  Shadow = \"Shadow\",\n  Ranger = \"Ranger\",\n  Duelist = \"Duelist\",\n  Marauder = \"Marauder\",\n  Templar = \"Templar\"\n}\n\n// ! START OF COMPONENT ! //\nfunction App() {\n  const [character, setCharacter] = useState<CharacterType>(CharacterType.Scion)\n  const [groupCharacters, setGroupCharacters] = useState<CharacterType[]>([])\n  const [activeGems, modifyGem] = useReducer((state: Array<string>, action: TGemAction) => {\n    if (!action.gem) return state\n    switch(action.type) {\n      case 'add':\n        if (state.indexOf(action.gem) > -1) {\n          return state\n        } else {\n          return [...state, action.gem].sort((a, b) => gemMap[a].level - gemMap[b].level)\n        }\n      case 'remove':\n        console.log('remove triggered')\n        const itemIndex = state.indexOf(action.gem)\n        console.log(itemIndex)\n        if (itemIndex > -1) {\n          const stateCopy = [...state]\n          stateCopy.splice(itemIndex, 1)\n          return stateCopy\n        }\n        return [...state]\n      default:\n        throw new Error();\n    }\n  }, [])\n\n  const addNewGem = (event: ChangeEvent<{}>, value: string | null) => {\n    modifyGem({\n      type: 'add',\n      gem: value,\n    })\n  }\n\n  const handleCharacterChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setCharacter(event.target.value as CharacterType)\n  }\n\n  const handleGroupChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setGroupCharacters(event.target.value as CharacterType[])\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"body\">\n        <div id=\"controls\">\n          <div id=\"class-picker\">\n            <FormControl className=\"form-control-class-picker\">\n              <InputLabel>Character</InputLabel>\n              <Select value={character} onChange={handleCharacterChange}>\n                <MenuItem value=\"Scion\">Scion</MenuItem>\n                <MenuItem value=\"Witch\">Witch</MenuItem>\n                <MenuItem value=\"Shadow\">Shadow</MenuItem>\n                <MenuItem value=\"Ranger\">Ranger</MenuItem>\n                <MenuItem value=\"Duelist\">Duelist</MenuItem>\n                <MenuItem value=\"Marauder\">Marauder</MenuItem>\n                <MenuItem value=\"Templar\">Templar</MenuItem>\n              </Select>\n            </FormControl>\n          </div>\n          <div id=\"gem-search-bar\">\n            <Autocomplete\n              options={gemNames}\n              onChange={addNewGem}\n              value={null}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Type here to search for gems\"\n                  variant=\"outlined\"\n                  inputProps={{\n                    ...params.inputProps,\n                    autoComplete: 'new-password',\n                  }}\n                />\n              )}\n            />\n          </div>\n          <div id=\"group-picker\">\n            <FormControl className=\"form-control-group-picker\">\n              <InputLabel>Group Characters</InputLabel>\n              <Select multiple value={groupCharacters} onChange={handleGroupChange}>\n                <MenuItem value=\"Scion\">Scion</MenuItem>\n                <MenuItem value=\"Witch\">Witch</MenuItem>\n                <MenuItem value=\"Shadow\">Shadow</MenuItem>\n                <MenuItem value=\"Ranger\">Ranger</MenuItem>\n                <MenuItem value=\"Duelist\">Duelist</MenuItem>\n                <MenuItem value=\"Marauder\">Marauder</MenuItem>\n                <MenuItem value=\"Templar\">Templar</MenuItem>\n              </Select>\n              <FormHelperText>Other classes in your leveling group</FormHelperText>\n            </FormControl>\n          </div>\n        </div>\n        <div className=\"active-gems\">\n          {activeGems.map(gem => (\n            <Button\n              className=\"mui-button\"\n              key={gem}\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={() => modifyGem({ type: 'remove', gem })}\n            >\n              <CancelIcon className=\"remove-button\" />\n              { gem }\n            </Button>\n          ))}\n        </div>\n        <div id=\"gem-details\">\n          {activeGems.map(gem => (\n            <GemDetailsCard\n              {...gemMap[gem]}\n              key={gem}\n              playerCharacter={character}\n              groupCharacters={groupCharacters}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react'\r\nimport './GemDetailsCard.scss'\r\nimport { IGemData, CharacterType } from './App'\r\nimport Box from '@material-ui/core/Box';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { green, red, yellow } from '@material-ui/core/colors';\r\n\r\ninterface IProps extends IGemData {\r\n  playerCharacter: CharacterType,\r\n  groupCharacters: CharacterType[],\r\n}\r\n\r\nconst GemDetailsCard: React.FC<IProps> = ({\r\n  name,\r\n  groupCharacters = [],\r\n  questSource: qS,\r\n  level,\r\n  playerCharacter,\r\n  vendorClasses: vC,\r\n}) => {\r\n  const vendorClasses = vC.replace('All, Classes', 'Scion, Witch, Shadow, Ranger, Duelist, Marauder, Templar')\r\n  const questSource = {\r\n    ...qS,\r\n    classes: qS.classes.replace('All, Classes', 'Scion, Witch, Shadow, Ranger, Duelist, Marauder, Templar')\r\n  }\r\n  const groupBuyability = groupCharacters.filter(char => vendorClasses.includes(char))\r\n  const buyabilityStatus = vendorClasses.includes(playerCharacter)\r\n    ? 'self'\r\n    : groupBuyability.length > 0\r\n      ? 'group'\r\n      : 'cant'\r\n\r\n  console.log(questSource)\r\n  console.log(qS)\r\n  return (\r\n    <Box m={2}>\r\n      <div className=\"gem-name\">{name}</div>\r\n      <div className=\"quest\">\r\n        {questSource.name === 'fixture_of_fate' \r\n          ? (\r\n            \"Available after the library quest in Act 3\"\r\n          ) : (\r\n            <div className=\"quest-container\">\r\n              <div className=\"quest-act\">Act {questSource.act}</div>\r\n              <div className=\"vr\" />\r\n              <div className=\"quest-name\">「{questSource.name.replaceAll('_', ' ')}」</div>\r\n            </div>\r\n          )\r\n        }\r\n      </div>\r\n      <div className=\"gem-level\">Requires Level {level}</div>\r\n      <div className=\"class-section\">\r\n        {(() => {\r\n          switch(buyabilityStatus) {\r\n            case 'self':\r\n              return (\r\n                <span className=\"quest-qualifier\" style={{ color: green[500] }}>\r\n                  <DoneIcon fontSize=\"small\" />\r\n                  <span>You can buy this</span>\r\n                </span>\r\n              )\r\n            case 'group':\r\n              return (\r\n                <span className=\"quest-qualifier\" style={{ color: yellow[900] }}>\r\n                  <DoneIcon fontSize=\"small\" />\r\n                  <span>Your groups' {groupBuyability.join('/')} can buy this</span>\r\n                </span>\r\n              )\r\n            case 'cant':\r\n            default:\r\n              return (\r\n                <span className=\"quest-qualifier\" style={{ color: yellow[900] }}>\r\n                  <CloseIcon fontSize=\"small\" />\r\n                  {(+questSource.act > 3) \r\n                    ? (\r\n                      <span style={{ color: red[500] }}>You cannot buy this until the beach clearing quest in Act 6</span>\r\n                    ) : (\r\n                      <span style={{ color: red[500] }}>You cannot buy this until the library quest in Act 3</span>\r\n                    )\r\n                  }\r\n                </span>\r\n              )\r\n          }\r\n        })()}\r\n      </div>\r\n      \r\n      \r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default GemDetailsCard\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nreportWebVitals();\n"],"sourceRoot":""}