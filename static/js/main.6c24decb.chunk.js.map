{"version":3,"sources":["App.tsx","GemDetailsCard.tsx","reportWebVitals.ts","index.tsx"],"names":["CharacterType","GemDetailsCard","name","groupCharacters","qS","questSource","level","playerCharacter","vendorClasses","replace","classes","groupBuyability","filter","char","includes","buyabilityStatus","length","Box","m","className","act","replaceAll","style","color","green","fontSize","yellow","join","red","gemData","rawGemData","gem","vendors","colors","quests","map","vendor","gemMap","reduce","total","gemNames","App","useState","Scion","character","setCharacter","setGroupCharacters","importDialogOpen","setImportDialogOpen","exportDialogOpen","setExportDialogOpen","importString","setImportString","useReducer","state","action","type","indexOf","sort","a","b","console","log","itemIndex","stateCopy","splice","Error","activeGems","modifyGem","handleImportDialogClose","handleExportDialogClose","id","Fab","onClick","aria-label","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","label","value","onChange","event","target","fullWidth","DialogActions","Button","split","substring","trim","forEach","gutterBottom","FormControl","InputLabel","Select","MenuItem","Autocomplete","options","renderInput","params","variant","inputProps","autoComplete","multiple","FormHelperText","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c24decb.chunk.js","sourcesContent":["import React, { ChangeEvent, useReducer, useState } from 'react';\nimport './App.scss';\n\n/* Material UI imports */\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Select from '@material-ui/core/Select';\nimport Fab from '@material-ui/core/Fab';\nimport PublishIcon from '@material-ui/icons/Publish';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n/* End of Material UI */\n\nimport rawGemData from './gemdata.json'\nimport GemDetailsCard from './GemDetailsCard';\nimport { Typography } from '@material-ui/core';\n\ntype TQuest = {\n  act: string,\n  name: string,\n  classes: string,\n}\n\nexport interface IGemData {\n  name: string,\n  level: number,\n  vendorClasses: string,\n  questSource: TQuest,\n}\n\nconst gemData: IGemData[] = rawGemData.filter(gem => {\n  // Vendor length 0 is awakened gens\n  return (\n    gem.vendors.length > 0\n    && !gem.colors.includes('White')\n    && !(gem.quests.length === 0 && gem.level === '31')\n  )\n}).map(gem => ({\n  name: gem.name,\n  level: +gem.level || 31,\n  vendorClasses: gem.vendors.filter(vendor => vendor.act !== '1')[0]?.classes,\n  questSource: gem.quests[0] || {\n    act: \"3\",\n    name: \"fixture_of_fate\",\n    classes: \"All, Classes\"\n  },\n}))\n\n// console.log(rawGemData.filter(l => l.vendors.length > 1).map(gem => gem.name))\n\nconst gemMap: {[key: string]: IGemData} = gemData.reduce((total, gem) => {\n  // @ts-expect-error idk wtf is going up here honestly\n  total[gem.name] = gem\n  return total\n}, {})\n\nconst gemNames = gemData.map(gem => gem.name)\n\ntype TGemAction = {\n  type: 'add' | 'remove',\n  gem: string | null\n}\n\nexport enum CharacterType {\n  Scion = \"Scion\",\n  Witch = \"Witch\",\n  Shadow = \"Shadow\",\n  Ranger = \"Ranger\",\n  Duelist = \"Duelist\",\n  Marauder = \"Marauder\",\n  Templar = \"Templar\"\n}\n\n// !  =========================================================================== ! //\n// !  ========================== START OF COMPONENT ============================= ! //\n// !  =========================================================================== ! //\nfunction App() {\n  const [character, setCharacter] = useState<CharacterType>(CharacterType.Scion)\n  const [groupCharacters, setGroupCharacters] = useState<CharacterType[]>([])\n  const [importDialogOpen, setImportDialogOpen] = useState<boolean>(false)\n  const [exportDialogOpen, setExportDialogOpen] = useState<boolean>(false)\n  const [importString, setImportString] = useState<string>('')\n  const [activeGems, modifyGem] = useReducer((state: Array<string>, action: TGemAction) => {\n    if (!action.gem) return state\n    switch(action.type) {\n      case 'add':\n        if (state.indexOf(action.gem) > -1) {\n          return state\n        } else {\n          return [...state, action.gem].sort((a, b) => gemMap[a].level - gemMap[b].level)\n        }\n      case 'remove':\n        console.log('remove triggered')\n        const itemIndex = state.indexOf(action.gem)\n        console.log(itemIndex)\n        if (itemIndex > -1) {\n          const stateCopy = [...state]\n          stateCopy.splice(itemIndex, 1)\n          return stateCopy\n        }\n        return [...state]\n      default:\n        throw new Error();\n    }\n  }, [])\n\n  const addNewGem = (event: ChangeEvent<{}>, value: string | null) => {\n    modifyGem({\n      type: 'add',\n      gem: value,\n    })\n  }\n\n  const handleCharacterChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setCharacter(event.target.value as CharacterType)\n  }\n\n  const handleGroupChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setGroupCharacters(event.target.value as CharacterType[])\n  }\n\n  const handleImportDialogClose = () => setImportDialogOpen(false)\n\n  const handleImportDialogSubmit = () => {\n    setImportDialogOpen(false)\n    const gems = importString.split(',').map((substring: string) => substring.trim())\n    gems.forEach(gem => modifyGem({ type: 'add', gem}))\n  }\n\n  const handleImportStringChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setImportString(event.target.value as string)\n  }\n\n  const handleExportDialogClose = () => setExportDialogOpen(false)\n\n\n  // ! It was a mistake not to extrapolate some of these into their own subcomponents but I am too deep\n  // ! and close to completion in a hobbyist project to bother changing now\n  return (\n    <div className=\"app\">\n      <div id=\"data-controls\">\n        <Fab onClick={() => setExportDialogOpen(true)} aria-label=\"export\">\n          <GetAppIcon className=\"icon\" />\n        </Fab>\n        <Fab onClick={() => setImportDialogOpen(true)} aria-label=\"export\">\n          <PublishIcon className=\"icon\" />\n        </Fab>\n      </div>\n      <div id=\"dialog-container\">\n        <Dialog\n          open={importDialogOpen}\n          onClose={handleImportDialogClose}\n          aria-labelledby=\"import-dialog-title\"\n        >\n          <DialogTitle id=\"import-dialog-title\">\n            Import Gems\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Enter a list of exact gem names (case sensitive) separated by commas in the field below, then click 'OK'\n            </DialogContentText>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              id=\"import-string\"\n              label=\"Gem list\"\n              value={importString}\n              onChange={handleImportStringChange}\n              fullWidth\n            />\n            <DialogActions>\n              <Button onClick={handleImportDialogSubmit}>OK</Button>\n              <Button onClick={handleImportDialogClose}>Cancel</Button>\n            </DialogActions>\n          </DialogContent>\n        </Dialog>\n        <Dialog\n          open={exportDialogOpen}\n          onClose={handleExportDialogClose}\n          aria-labelledby=\"export-dialog-title\"\n        >\n          <DialogTitle id=\"export-dialog-title\">\n            Export Gems\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText gutterBottom>\n              Copy the string below and put it somewhere you won't lose it.\n            </DialogContentText>\n            <DialogContentText color=\"textPrimary\">\n              {activeGems.length > 0 ? activeGems.join(', ') : 'Select gems to export them'}\n            </DialogContentText>\n            <DialogActions>\n              <Button onClick={handleExportDialogClose}>OK</Button>\n            </DialogActions>\n          </DialogContent>\n        </Dialog>\n      </div>\n      <div className=\"body\">\n        <div id=\"controls\">\n          <div id=\"class-picker\">\n            <FormControl className=\"form-control-class-picker\">\n              <InputLabel>Character</InputLabel>\n              <Select value={character} onChange={handleCharacterChange}>\n                <MenuItem value=\"Scion\">Scion</MenuItem>\n                <MenuItem value=\"Witch\">Witch</MenuItem>\n                <MenuItem value=\"Shadow\">Shadow</MenuItem>\n                <MenuItem value=\"Ranger\">Ranger</MenuItem>\n                <MenuItem value=\"Duelist\">Duelist</MenuItem>\n                <MenuItem value=\"Marauder\">Marauder</MenuItem>\n                <MenuItem value=\"Templar\">Templar</MenuItem>\n              </Select>\n            </FormControl>\n          </div>\n          <div id=\"gem-search-bar\">\n            <Autocomplete\n              options={gemNames}\n              onChange={addNewGem}\n              value={null}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Type here to search for gems\"\n                  variant=\"outlined\"\n                  inputProps={{\n                    ...params.inputProps,\n                    autoComplete: 'new-password',\n                  }}\n                />\n              )}\n            />\n          </div>\n          <div id=\"group-picker\">\n            <FormControl className=\"form-control-group-picker\">\n              <InputLabel>Group Characters</InputLabel>\n              <Select multiple value={groupCharacters} onChange={handleGroupChange}>\n                <MenuItem value=\"Scion\">Scion</MenuItem>\n                <MenuItem value=\"Witch\">Witch</MenuItem>\n                <MenuItem value=\"Shadow\">Shadow</MenuItem>\n                <MenuItem value=\"Ranger\">Ranger</MenuItem>\n                <MenuItem value=\"Duelist\">Duelist</MenuItem>\n                <MenuItem value=\"Marauder\">Marauder</MenuItem>\n                <MenuItem value=\"Templar\">Templar</MenuItem>\n              </Select>\n              <FormHelperText>Other classes in your leveling group</FormHelperText>\n            </FormControl>\n          </div>\n        </div>\n        <div className=\"active-gems\">\n          {activeGems.map(gem => (\n            <Button\n              className=\"mui-button\"\n              key={gem}\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={() => modifyGem({ type: 'remove', gem })}\n            >\n              <CancelIcon className=\"remove-button\" />\n              { gem }\n            </Button>\n          ))}\n        </div>\n        <div id=\"gem-details\">\n          {activeGems.map(gem => (\n            <GemDetailsCard\n              {...gemMap[gem]}\n              key={gem}\n              playerCharacter={character}\n              groupCharacters={groupCharacters}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react'\r\nimport './GemDetailsCard.scss'\r\nimport { IGemData, CharacterType } from './App'\r\nimport Box from '@material-ui/core/Box';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { green, red, yellow } from '@material-ui/core/colors';\r\n\r\ninterface IProps extends IGemData {\r\n  playerCharacter: CharacterType,\r\n  groupCharacters: CharacterType[],\r\n}\r\n\r\nconst GemDetailsCard: React.FC<IProps> = ({\r\n  name,\r\n  groupCharacters = [],\r\n  questSource: qS,\r\n  level,\r\n  playerCharacter,\r\n  vendorClasses: vC,\r\n}) => {\r\n  const vendorClasses = vC.replace('All, Classes', 'Scion, Witch, Shadow, Ranger, Duelist, Marauder, Templar')\r\n  const questSource = {\r\n    ...qS,\r\n    classes: qS.classes.replace('All, Classes', 'Scion, Witch, Shadow, Ranger, Duelist, Marauder, Templar')\r\n  }\r\n  const groupBuyability = groupCharacters.filter(char => vendorClasses.includes(char))\r\n  const buyabilityStatus = vendorClasses.includes(playerCharacter)\r\n    ? 'self'\r\n    : groupBuyability.length > 0\r\n      ? 'group'\r\n      : 'cant'\r\n\r\n  return (\r\n    <Box m={2}>\r\n      <div className=\"gem-name\">{name}</div>\r\n      <div className=\"quest\">\r\n        {questSource.name === 'fixture_of_fate' \r\n          ? (\r\n            \"Available after the library quest in Act 3\"\r\n          ) : (\r\n            <div className=\"quest-container\">\r\n              <div className=\"quest-act\">Act {questSource.act}</div>\r\n              <div className=\"vr\" />\r\n              <div className=\"quest-name\">「{questSource.name.replaceAll('_', ' ')}」</div>\r\n            </div>\r\n          )\r\n        }\r\n      </div>\r\n      <div className=\"gem-level\">Requires Level {level}</div>\r\n      <div className=\"class-section\">\r\n        {(() => {\r\n          switch(buyabilityStatus) {\r\n            case 'self':\r\n              return (\r\n                <span className=\"quest-qualifier\" style={{ color: green[500] }}>\r\n                  <DoneIcon fontSize=\"small\" />\r\n                  <span>You can buy this</span>\r\n                </span>\r\n              )\r\n            case 'group':\r\n              return (\r\n                <span className=\"quest-qualifier\" style={{ color: yellow[900] }}>\r\n                  <DoneIcon fontSize=\"small\" />\r\n                  <span>Your groups' {groupBuyability.join('/')} can buy this</span>\r\n                </span>\r\n              )\r\n            case 'cant':\r\n            default:\r\n              return (\r\n                <span className=\"quest-qualifier\" style={{ color: yellow[900] }}>\r\n                  <CloseIcon fontSize=\"small\" />\r\n                  {(+questSource.act > 3) \r\n                    ? (\r\n                      <span style={{ color: red[500] }}>You cannot buy this until the beach clearing quest in Act 6</span>\r\n                    ) : (\r\n                      <span style={{ color: red[500] }}>You cannot buy this until the library quest in Act 3</span>\r\n                    )\r\n                  }\r\n                </span>\r\n              )\r\n          }\r\n        })()}\r\n      </div>\r\n      \r\n      \r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default GemDetailsCard\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nreportWebVitals();\n"],"sourceRoot":""}